/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'groovy'
    id 'com.palantir.git-version' version '0.12.3'
}

applicationName = "KFSXTrackingServer"
applicationDefaultJvmArgs = ["-propertyfile ${new File('etc', 'server.properties').toString()}"]
version gitDescribeToVersion(gitVersion())

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    implementation 'org.codehaus.groovy:groovy-all:3.0.6'
    implementation 'commons-cli:commons-cli:1.4'
    runtimeOnly 'org.xerial:sqlite-jdbc:3.32.3.2'
}

application {
    // Define the main class for the application.
    mainClass = 'scaryghost.kfsxtrackingserver.App'
}

task generateSources {
    def outputDir = file("$buildDir/generated-src")
    outputs.dir outputDir

    doFirst {
        def srcFile = file("$outputDir/scaryghost/kfsxtrackingserver/Version.java")
        srcFile.parentFile.mkdirs()
        srcFile.write("""
package scaryghost.kfsxtrackingserver;

/**
 * Stores the version of the project.
 * @author etsai
 */
public class Version {
    /** Generated by gradle task */
    public static final String gitTag="$project.version";
}

""")
    }
}

task copyEtcFiles {
    outputs.dir file("$buildDir/etc")
    doLast {
        copy {
            from 'etc'
            into buildDir
        }
    }
}

applicationDistribution.from(copyEtcFiles) {
    into "etc"
}

compileGroovy.dependsOn generateSources
compileGroovy.source generateSources.outputs.files, sourceSets.main.groovy


def gitDescribeToVersion(describe) {
    def appVersion
    def describeParts = describe.split("-")
    def parts = describeParts[0].split("\\.")

    switch(parts.length) {
        case 2:
            return describeParts[0] + (describeParts.length == 1 ? ".0" : ".${describeParts[1]}")
        case 3:
            def actualStep = parts[2].toInteger() + describeParts[1].toInteger()
            return "${versionParts[0]}.${versionParts[1]}.${actualStep}"
        default:
            throw new RuntimeException("Unsure how to parse $project.version")
    }
}
